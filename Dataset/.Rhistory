write.table(Activity_Subject_Grouping_Summary, "Activity_Subject_Grouping_Summary.txt")
Activity_Subject_Grouping_Dataset<-group_by(Subject_Activity_Observations_Dataset,Activity,SubjectId)
Activity_Subject_Grouping_Summary<-summarise_each(Activity_Subject_Grouping_Dataset,funs(mean))
Activity_Subject_Grouping_Dataset<-group_by(Subject_Activity_Observations_Dataset,Activity,SubjectId)
Activity_Subject_Grouping_Summary<-summarise_each(Activity_Subject_Grouping_Dataset,funs(mean))
write.table(Activity_Subject_Grouping_Summary, "Activity_Subject_Grouping_Summary.txt")
read.table("Activity_Subject_Grouping_Summary.txt"")
read.table("Activity_Subject_Grouping_Summary.txt")
tmp1<-read.table("Activity_Subject_Grouping_Summary.txt")
View(tmp1)
View(tmp1)
# Initialize Program
library(data.table)
library(dplyr)
library(tidyr)
# Load Activity Lables and set descriptive names to the columns
Activity_Labels<-read.table("activity_labels.txt")
Activity_Labels<-rename(Activity_Labels, Activity_Id=V1,Activity_Desc=V2)
# Load MeasurementParameters from Features.txt and set descriptive column names
MeasurementParameters<-read.table("features.txt")
MeasurementParameters<-rename(MeasurementParameters, Variable_id=V1,MeasurementParameter=V2)
# Load Training Data
XTrain<-read.table("train/X_train.txt")
YTrain<-read.table("train/y_train.txt")
SubjectTrain<-read.table("train/subject_train.txt")
# Load Test Data
XTest<-read.table("test/X_test.txt")
YTest<-read.table("test/y_test.txt")
SubjectTest<-read.table("test/subject_test.txt")
# Merge training and Test Sets
Observation_For_Each_MeasurementParameter_All<-rbind(XTrain,XTest)
Activity_Associated_With_Each_Observation_All<-rbind(YTrain,YTest)
Subjects_All<-rbind(SubjectTrain,SubjectTest)
# Keep only columns for meann and std
#Select feature
mean_std_vars_index<-grep("-mean\\(\\)|-std\\(\\)",MeasurementParameters[,2])
# strip out unused features
Observation_For_Each_MeasurementParameter_All <- Observation_For_Each_MeasurementParameter_All[,mean_std_vars_index]
# rename columns
names(Observation_For_Each_MeasurementParameter_All) <- tolower(MeasurementParameters[mean_std_vars_index, 2])
# Set Descriptive Activity Names
Activity_Associated_With_Each_Observation_All<-rename(Activity_Associated_With_Each_Observation_All,Activity=V1)
Activity_Associated_With_Each_Observation_All[,"Activity"] = Activity_Labels[Activity_Associated_With_Each_Observation_All[,"Activity"],"Activity_Desc"]
# Set Descriptive Variable Names
Subjects_All<-rename(Subjects_All, SubjectId=V1)
Subject_Activity_Observations_Dataset <- cbind(Subjects_All, Activity_Associated_With_Each_Observation_All, Observation_For_Each_MeasurementParameter_All)
# Average of each variable for each activity and each subject and
List_Of_Activities<-Activity_Labels$Activity_Desc
List_Of_Subjects<-sort(unique(Subject_Activity_Observations_Dataset$SubjectId))
#  Grouping asn Summary by Activity first, then Subject
Activity_Subject_Grouping_Dataset<-group_by(Subject_Activity_Observations_Dataset,Activity,SubjectId)
Activity_Subject_Grouping_Summary<-summarise_each(Activity_Subject_Grouping_Dataset,funs(mean))
write.table(Activity_Subject_Grouping_Summary, "Activity_Subject_Grouping_Summary.txt")
#  Grouping asn Summary by Subject first, then activity
Subject_Activity_Grouping_Dataset<-group_by(Subject_Activity_Observations_Dataset,Activity,SubjectId)
Subject_Activity_Grouping_Summary<-summarise_each(Subject_Activity_Grouping_Dataset,funs(mean))
write.table(Subject_Activity_Grouping_Summary, "Subject_Activity_Grouping_Summary")
View(Subject_Activity_Grouping_Summary)
View(Subject_Activity_Grouping_Summary)
View(Subject_Activity_Observations_Dataset)
View(Subject_Activity_Observations_Dataset)
?gsub
cnames<-colnames(Subject_Activity_Observations_Dataset)
cnames
grep(mean,cnames)
grep("mean",cnames)
grep("mean",cnames,value=TRUE)
regexpr("mean",cnames)
#------------------
# Updating the colNames vector to include the new column names after merge
colNames  = colnames(Subject_Activity_Observations_Dataset);
# 4. Appropriately label the data set with descriptive activity names.
# Cleaning up the variable names
for (i in 1:length(colNames))
{
colNames[i] = gsub("\\()","",colNames[i])
colNames[i] = gsub("-std$","StdDev",colNames[i])
colNames[i] = gsub("-mean","Mean",colNames[i])
colNames[i] = gsub("^(t)","time",colNames[i])
colNames[i] = gsub("^(f)","freq",colNames[i])
colNames[i] = gsub("([Gg]ravity)","Gravity",colNames[i])
colNames[i] = gsub("([Bb]ody[Bb]ody|[Bb]ody)","Body",colNames[i])
colNames[i] = gsub("[Gg]yro","Gyro",colNames[i])
colNames[i] = gsub("AccMag","AccMagnitude",colNames[i])
colNames[i] = gsub("([Bb]odyaccjerkmag)","BodyAccJerkMagnitude",colNames[i])
colNames[i] = gsub("JerkMag","JerkMagnitude",colNames[i])
colNames[i] = gsub("GyroMag","GyroMagnitude",colNames[i])
};
colNames
View(Subject_Activity_Observations_Dataset)
View(Subject_Activity_Observations_Dataset)
View(Subject_Activity_Grouping_Summary)
View(Subject_Activity_Grouping_Summary)
library("Swirl")
library(swirl)
library(Swirl)
installed.packages("Swirl")
Sqirl()
SWirl()
install.packages("Swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(tidyr)
students
?gather
gather(students,c("students","sex","count"),-grade)
gather(students,c("students","sex","count"),-"grade")
gather(students,student,sex,count,-"grade")
g
gather
gather(students, sex, count, -grade)
gather(Subject_Activity_Observations_Dataset,MesurementParameter,Observation,-SubjectId,-Activity)
narrow<-gather(Subject_Activity_Observations_Dataset,MesurementParameter,Observation,-SubjectId,-Activity)
View(narrow)
Narrow_Grouping_Dataset<-group_by(narrow,SubjectId,Activity)
rm(narrow)
Tidy_Narrow<-gather(Subject_Activity_Observations_Dataset,MesurementParameter,Observation,-SubjectId,-Activity)
Narrow_Grouping_Dataset<-group_by(Tidy_Narrow,SubjectId,Activity)
Tidy_Narrow_Summary<-summarise(Narrow_Grouping_Dataset,SubjectId,Activity)
Tidy_Narrow_Summary<-summarise(Narrow_Grouping_Dataset,funct(mean))
Tidy_Narrow_Summary<-summarise(Narrow_Grouping_Dataset,funs(mean))
?summarise
Tidy_Narrow_Summary<-summarise(Narrow_Grouping_Dataset,mean(Observation))
View(Tidy_Narrow_Summary)
View(Tidy_Narrow_Summary)
View(Tidy_Narrow)
View(Tidy_Narrow)
Tidy_Narrow_Summary<-summarise(Narrow_Grouping_Dataset,mean(MeasurementParameter))
Tidy_Narrow_Summary<-summarise(Narrow_Grouping_Dataset,mean(MesurementParameter))
warnings()
Narrow_Grouping_Dataset<-group_by(Tidy_Narrow,SubjectId,Activity,MesurementParameter)
View(Tidy_Narrow_Summary)
View(Tidy_Narrow_Summary)
View(Tidy_Narrow)
View(Tidy_Narrow)
View(Tidy_Narrow)
Tidy_Narrow_Summary<-summarise(Narrow_Grouping_Dataset,mean(Observation))
View(Tidy_Narrow_Summary)
View(Tidy_Narrow_Summary)
Tidy_Narrow
str(Tidy_Narrow)
View(Subject_Activity_Grouping_Summary)
View(Subject_Activity_Grouping_Summary)
Tidy_Narrow<-gather(Subject_Activity_Observations_Dataset,MeasurementParameter,Observation,-SubjectId,-Activity)
Narrow_Grouping_Dataset<-group_by(Tidy_Narrow,SubjectId,Activity,MeasurementParameter)
Tidy_Narrow_Summary<-summarise(Narrow_Grouping_Dataset,mean(Observation))
Tidy_Narrow_Summary<-summarise(Narrow_Grouping_Dataset,mean(Observation))
write.table(Subject_Activity_Grouping_Summary, "Tidy_Narrow_Summary.txt")
write.table(Tidy_Narrow_Summary, "Tidy_Narrow_Summary.txt")
View(YTest)
View(Activity_Subject_Grouping_Dataset)
##########################################################################################################
## Harshal Naidu's submission for the Course project getdata-032 - Getting and Cleaning Data
## Program Description
### Pre-Requisites
###  - The original data set is copied at C:\Coursera\GettingAndCleaningdata\Project\UCIHAR.
###  - data.table, dplyr adn tidyr packages are installed.
### Dataset Description
###  - There are two broad data groups Training and Test that are presumably used for training and testng the ML algorithm
###  - For the purpose of this analysis these need to  be mergerd
###  - Subjects are people who were part of the experiment.
###  - Each activity has a unique label stored in activity_labels.txt
###  - The parameters (or variables) that were measures are listed in Features.txt
###  - The Observations for each of the parameter is stored in XTrain and XTest File
###  - The corresponding activity for each measurement is stored in YTrain and YTest file
###  - The corresponding subject who performed the activity is stored in the SubjectTrain or SubjectTest file
###  - The number of values for the Subject, activities and observations match, i.e the relevant data is split into 3 type of files.
###  - Note: Unlike a unique list of Activities and MeasurementParameters, there's no unique list of subjects.
###  - Inertial Signals are not used in this analysis
### Program Logic
###  1. Load the packages using Library command
###  2. Load the Activity Label from activity_Lables.txt
###  3. Load the MEasurement Parameters from Features.txt
###  4. Load Test and Training data using read.tables.
###  Assignment Question 1 - "Merge the training and the test sets to create one data set"
###  5. Merge the training and the test data using the rbind
###  Assignment Question 2 - "Extract only the measurements on the mean and standard deviation for each measurement"
###  6. Use regular expression to extract teh index of columns with standard deviation and mean. Discard other columns
###  Assignment Question 3 -"Use descriptive activity names to name the activities in the data set"
###  7. Set descriptive activity names
###  8. Combine the Subject-Activity-Observation Datasets
###  Assignment Question 4 -"Appropriately labels the data set with descriptive variable names"
###  9. Clean up the MeasurementParameter naming.
###  Assignment Question 5 -"From the data set in step 4, creates a second, independent tidy data set with the average of
###                          each variable for each activity and each subject"
###  10.For the purpose of this assignment, the program demonstrates wide and narrow datasets
#### 10.1.1 Wide: Group by Activity first, then subject. Summarise each MeasurementParameter by mean. (As asked in the assignment)
#### 10.1.2 Wide: Group by Subject first, then Activity. Summarise each MeasurementParameter by mean. (Another way of looking at it)
#### 10.2. Gather all but SubjectID and Activity columns to make a narrow dataset such that each MeasurementParameter is
####       transposed to a value from a column resultig in a Subject->Activity->MeasurementParameter->Value stucture.
####       Summarise by mean of the observation.
####
####       Each summarised dataset is writen to disk using write.table command
##########################################################################################################
# Initialize Program
library(data.table)
library(dplyr)
library(tidyr)
# Load Activity lables and set descriptive names to the columns
Activity_Labels<-read.table("activity_labels.txt")
Activity_Labels<-rename(Activity_Labels, Activity_Id=V1,Activity_Desc=V2)
# Load MeasurementParameters from Features.txt and set descriptive column names
MeasurementParameters<-read.table("features.txt")
MeasurementParameters<-rename(MeasurementParameters, Variable_id=V1,MeasurementParameter=V2)
# Load Training Data
XTrain<-read.table("train/X_train.txt")
YTrain<-read.table("train/y_train.txt")
SubjectTrain<-read.table("train/subject_train.txt")
# Load Test Data
XTest<-read.table("test/X_test.txt")
YTest<-read.table("test/y_test.txt")
SubjectTest<-read.table("test/subject_test.txt")
# Assignment Question 1 - "Merge the training and the test sets to create one data set"
# Merge training and Test Sets
Observation_For_Each_MeasurementParameter_All<-rbind(XTrain,XTest)
Activity_Associated_With_Each_Observation_All<-rbind(YTrain,YTest)
Subjects_All<-rbind(SubjectTrain,SubjectTest)
#  Assignment Question 2 - "Extract only the measurements on the mean and standard deviation for each measurement"
# Keep only columns for mean and std
# Create in integer vector with index of the needed Parameters
mean_std_vars_index<-grep("-mean\\(\\)|-std\\(\\)",MeasurementParameters[,2])
# Remove the parameters not reqired.
Observation_For_Each_MeasurementParameter_All <- Observation_For_Each_MeasurementParameter_All[,mean_std_vars_index]
# Update the proper coluum names.
names(Observation_For_Each_MeasurementParameter_All) <- tolower(MeasurementParameters[mean_std_vars_index, 2])
# Assignment Question 3 -"Use descriptive activity names to name the activities in the data set"
# Set Descriptive Activity Names
Activity_Associated_With_Each_Observation_All<-rename(Activity_Associated_With_Each_Observation_All,Activity=V1)
Activity_Associated_With_Each_Observation_All[,"Activity"] = Activity_Labels[Activity_Associated_With_Each_Observation_All[,"Activity"],"Activity_Desc"]
Subjects_All<-rename(Subjects_All, SubjectId=V1)
Subject_Activity_Observations_Dataset <- cbind(Subjects_All, Activity_Associated_With_Each_Observation_All, Observation_For_Each_MeasurementParameter_All)
#  Assignment Question 4 -"Appropriately label the data set with descriptive variable names"
#------------------
# Updating the colNames vector to include the new column names after merge
colNames  = colnames(Subject_Activity_Observations_Dataset);
# 4. Appropriately label the data set with descriptive activity names.
# Cleaning up the variable names
for (i in 1:length(colNames))
{
colNames[i] = gsub("\\()","",colNames[i])
colNames[i] = gsub("-std$","StdDev",colNames[i])
colNames[i] = gsub("-mean","Mean",colNames[i])
colNames[i] = gsub("^(t)","time",colNames[i])
colNames[i] = gsub("^(f)","freq",colNames[i])
colNames[i] = gsub("([Gg]ravity)","Gravity",colNames[i])
colNames[i] = gsub("([Bb]ody[Bb]ody|[Bb]ody)","Body",colNames[i])
colNames[i] = gsub("[Gg]yro","Gyro",colNames[i])
colNames[i] = gsub("AccMag","AccMagnitude",colNames[i])
colNames[i] = gsub("([Bb]odyaccjerkmag)","BodyAccJerkMagnitude",colNames[i])
colNames[i] = gsub("JerkMag","JerkMagnitude",colNames[i])
colNames[i] = gsub("GyroMag","GyroMagnitude",colNames[i])
};
#-----------------------------
#  Assignment Question 5 -"From the data set in step 4, creates a second, independent tidy data set with the average of
#                          each variable for each activity and each subject"
# Wide Dataset
#  Grouping asn Summary by Activity first, then Subject
Activity_Subject_Grouping_Dataset<-group_by(Subject_Activity_Observations_Dataset,Activity,SubjectId)
Activity_Subject_Grouping_Summary<-summarise_each(Activity_Subject_Grouping_Dataset,funs(mean))
write.table(Activity_Subject_Grouping_Summary, "Activity_Subject_Grouping_Summary.txt")
#  Grouping asn Summary by Subject first, then activity
Subject_Activity_Grouping_Dataset<-group_by(Subject_Activity_Observations_Dataset,Activity,SubjectId)
Subject_Activity_Grouping_Summary<-summarise_each(Subject_Activity_Grouping_Dataset,funs(mean))
write.table(Subject_Activity_Grouping_Summary, "Subject_Activity_Grouping_Summary.txt")
# Tidy Narrow Dataset
Tidy_Narrow<-gather(Subject_Activity_Observations_Dataset,MeasurementParameter,Observation,-SubjectId,-Activity)
Narrow_Grouping_Dataset<-group_by(Tidy_Narrow,SubjectId,Activity,MeasurementParameter)
Tidy_Narrow_Summary<-summarise(Narrow_Grouping_Dataset,mean(Observation))
write.table(Tidy_Narrow_Summary, "Tidy_Narrow_Summary.txt")
##########################################################################################################
## Harshal Naidu's submission for the Course project getdata-032 - Getting and Cleaning Data
## Program Description
### Pre-Requisites
###  - The original data set is copied at C:\Coursera\GettingAndCleaningdata\Project\UCIHAR.
###  - data.table, dplyr adn tidyr packages are installed.
### Dataset Description
###  - There are two broad data groups Training and Test that are presumably used for training and testng the ML algorithm
###  - For the purpose of this analysis these need to  be mergerd
###  - Subjects are people who were part of the experiment.
###  - Each activity has a unique label stored in activity_labels.txt
###  - The parameters (or variables) that were measures are listed in Features.txt
###  - The Observations for each of the parameter is stored in XTrain and XTest File
###  - The corresponding activity for each measurement is stored in YTrain and YTest file
###  - The corresponding subject who performed the activity is stored in the SubjectTrain or SubjectTest file
###  - The number of values for the Subject, activities and observations match, i.e the relevant data is split into 3 type of files.
###  - Note: Unlike a unique list of Activities and MeasurementParameters, there's no unique list of subjects.
###  - Inertial Signals are not used in this analysis
### Program Logic
###  1. Load the packages using Library command
###  2. Load the Activity Label from activity_Lables.txt
###  3. Load the MEasurement Parameters from Features.txt
###  4. Load Test and Training data using read.tables.
###  Assignment Question 1 - "Merge the training and the test sets to create one data set"
###  5. Merge the training and the test data using the rbind
###  Assignment Question 2 - "Extract only the measurements on the mean and standard deviation for each measurement"
###  6. Use regular expression to extract teh index of columns with standard deviation and mean. Discard other columns
###  Assignment Question 3 -"Use descriptive activity names to name the activities in the data set"
###  7. Set descriptive activity names
###  8. Combine the Subject-Activity-Observation Datasets
###  Assignment Question 4 -"Appropriately labels the data set with descriptive variable names"
###  9. Clean up the MeasurementParameter naming.
###  Assignment Question 5 -"From the data set in step 4, creates a second, independent tidy data set with the average of
###                          each variable for each activity and each subject"
###  10.For the purpose of this assignment, the program demonstrates wide and narrow datasets
#### 10.1.1 Wide: Group by Activity first, then subject. Summarise each MeasurementParameter by mean. (As asked in the assignment)
#### 10.1.2 Wide: Group by Subject first, then Activity. Summarise each MeasurementParameter by mean. (Another way of looking at it)
#### 10.2. Gather all but SubjectID and Activity columns to make a narrow dataset such that each MeasurementParameter is
####       transposed to a value from a column resultig in a Subject->Activity->MeasurementParameter->Value stucture.
####       Summarise by mean of the observation.
####
####       Each summarised dataset is writen to disk using write.table command
##########################################################################################################
# Initialize Program
library(data.table)
library(dplyr)
library(tidyr)
# Load Activity lables and set descriptive names to the columns
Activity_Labels<-read.table("activity_labels.txt")
Activity_Labels<-rename(Activity_Labels, Activity_Id=V1,Activity_Desc=V2)
# Load MeasurementParameters from Features.txt and set descriptive column names
MeasurementParameters<-read.table("features.txt")
MeasurementParameters<-rename(MeasurementParameters, Variable_id=V1,MeasurementParameter=V2)
# Load Training Data
XTrain<-read.table("train/X_train.txt")
YTrain<-read.table("train/y_train.txt")
SubjectTrain<-read.table("train/subject_train.txt")
# Load Test Data
XTest<-read.table("test/X_test.txt")
YTest<-read.table("test/y_test.txt")
SubjectTest<-read.table("test/subject_test.txt")
# Assignment Question 1 - "Merge the training and the test sets to create one data set"
# Merge training and Test Sets
Observation_For_Each_MeasurementParameter_All<-rbind(XTrain,XTest)
Activity_Associated_With_Each_Observation_All<-rbind(YTrain,YTest)
Subjects_All<-rbind(SubjectTrain,SubjectTest)
#  Assignment Question 2 - "Extract only the measurements on the mean and standard deviation for each measurement"
# Keep only columns for mean and std
# Create in integer vector with index of the needed Parameters
mean_std_vars_index<-grep("-mean\\(\\)|-std\\(\\)",MeasurementParameters[,2])
# Remove the parameters not reqired.
Observation_For_Each_MeasurementParameter_All <- Observation_For_Each_MeasurementParameter_All[,mean_std_vars_index]
# Update the proper coluum names.
names(Observation_For_Each_MeasurementParameter_All) <- tolower(MeasurementParameters[mean_std_vars_index, 2])
# Assignment Question 3 -"Use descriptive activity names to name the activities in the data set"
# Set Descriptive Activity Names
Activity_Associated_With_Each_Observation_All<-rename(Activity_Associated_With_Each_Observation_All,Activity=V1)
Activity_Associated_With_Each_Observation_All[,"Activity"] = Activity_Labels[Activity_Associated_With_Each_Observation_All[,"Activity"],"Activity_Desc"]
Subjects_All<-rename(Subjects_All, SubjectId=V1)
Subject_Activity_Observations_Dataset <- cbind(Subjects_All, Activity_Associated_With_Each_Observation_All, Observation_For_Each_MeasurementParameter_All)
#  Assignment Question 4 -"Appropriately label the data set with descriptive variable names"
#------------------
# Updating the colNames vector to include the new column names after merge
colNames  = colnames(Subject_Activity_Observations_Dataset);
# 4. Appropriately label the data set with descriptive activity names.
# Cleaning up the variable names
for (i in 1:length(colNames))
{
colNames[i] = gsub("\\()","",colNames[i])
colNames[i] = gsub("-std$","StdDev",colNames[i])
colNames[i] = gsub("-mean","Mean",colNames[i])
colNames[i] = gsub("^(t)","time",colNames[i])
colNames[i] = gsub("^(f)","freq",colNames[i])
colNames[i] = gsub("([Gg]ravity)","Gravity",colNames[i])
colNames[i] = gsub("([Bb]ody[Bb]ody|[Bb]ody)","Body",colNames[i])
colNames[i] = gsub("[Gg]yro","Gyro",colNames[i])
colNames[i] = gsub("AccMag","AccMagnitude",colNames[i])
colNames[i] = gsub("([Bb]odyaccjerkmag)","BodyAccJerkMagnitude",colNames[i])
colNames[i] = gsub("JerkMag","JerkMagnitude",colNames[i])
colNames[i] = gsub("GyroMag","GyroMagnitude",colNames[i])
};
#-----------------------------
#  Assignment Question 5 -"From the data set in step 4, creates a second, independent tidy data set with the average of
#                          each variable for each activity and each subject"
# Wide Dataset
#  Grouping asn Summary by Activity first, then Subject
Activity_Subject_Grouping_Dataset<-group_by(Subject_Activity_Observations_Dataset,Activity,SubjectId)
Activity_Subject_Grouping_Summary<-summarise_each(Activity_Subject_Grouping_Dataset,funs(mean))
write.table(Activity_Subject_Grouping_Summary, "Activity_Subject_Grouping_Summary.txt")
#  Grouping asn Summary by Subject first, then activity
Subject_Activity_Grouping_Dataset<-group_by(Subject_Activity_Observations_Dataset,Activity,SubjectId)
Subject_Activity_Grouping_Summary<-summarise_each(Subject_Activity_Grouping_Dataset,funs(mean))
write.table(Subject_Activity_Grouping_Summary, "Subject_Activity_Grouping_Summary.txt")
# Tidy Narrow Dataset
Tidy_Narrow<-gather(Subject_Activity_Observations_Dataset,MeasurementParameter,Observation,-SubjectId,-Activity)
Narrow_Grouping_Dataset<-group_by(Tidy_Narrow,SubjectId,Activity,MeasurementParameter)
Tidy_Narrow_Summary<-summarise(Narrow_Grouping_Dataset,mean(Observation))
write.table(Tidy_Narrow_Summary, "Tidy_Narrow_Summary.txt")
rm(c("XTrain"))
rm(c("XTrain","YTrain"))
?rm
rm(XTrain,YTrain)
rm(XTrain,YTrain,SubjectTrain,XTest,YTest,SubjectTest)
##########################################################################################################
## Harshal Naidu's submission for the Course project getdata-032 - Getting and Cleaning Data
## Program Description
### Pre-Requisites
###  - The original data set is copied at C:\Coursera\GettingAndCleaningdata\Project\UCIHAR.
###  - data.table, dplyr adn tidyr packages are installed.
### Dataset Description
###  - There are two broad data groups Training and Test that are presumably used for training and testng the ML algorithm
###  - For the purpose of this analysis these need to  be mergerd
###  - Subjects are people who were part of the experiment.
###  - Each activity has a unique label stored in activity_labels.txt
###  - The parameters (or variables) that were measures are listed in Features.txt
###  - The Observations for each of the parameter is stored in XTrain and XTest File
###  - The corresponding activity for each measurement is stored in YTrain and YTest file
###  - The corresponding subject who performed the activity is stored in the SubjectTrain or SubjectTest file
###  - The number of values for the Subject, activities and observations match, i.e the relevant data is split into 3 type of files.
###  - Note: Unlike a unique list of Activities and MeasurementParameters, there's no unique list of subjects.
###  - Inertial Signals are not used in this analysis
### Program Logic
###  1. Load the packages using Library command
###  2. Load the Activity Label from activity_Lables.txt
###  3. Load the MEasurement Parameters from Features.txt
###  4. Load Test and Training data using read.tables.
###  Assignment Question 1 - "Merge the training and the test sets to create one data set"
###  5. Merge the training and the test data using the rbind
###  Assignment Question 2 - "Extract only the measurements on the mean and standard deviation for each measurement"
###  6. Use regular expression to extract teh index of columns with standard deviation and mean. Discard other columns
###  Assignment Question 3 -"Use descriptive activity names to name the activities in the data set"
###  7. Set descriptive activity names
###  8. Combine the Subject-Activity-Observation Datasets
###  Assignment Question 4 -"Appropriately labels the data set with descriptive variable names"
###  9. Clean up the MeasurementParameter naming.
###  Assignment Question 5 -"From the data set in step 4, creates a second, independent tidy data set with the average of
###                          each variable for each activity and each subject"
###  10.For the purpose of this assignment, the program demonstrates wide and narrow datasets
#### 10.1.1 Wide: Group by Activity first, then subject. Summarise each MeasurementParameter by mean. (As asked in the assignment)
#### 10.1.2 Wide: Group by Subject first, then Activity. Summarise each MeasurementParameter by mean. (Another way of looking at it)
#### 10.2. Gather all but SubjectID and Activity columns to make a narrow dataset such that each MeasurementParameter is
####       transposed to a value from a column resultig in a Subject->Activity->MeasurementParameter->Value stucture.
####       Summarise by mean of the observation.
####
####       Each summarised dataset is writen to disk using write.table command
##########################################################################################################
# Initialize Program
library(data.table)
library(dplyr)
library(tidyr)
# Load Activity lables and set descriptive names to the columns
Activity_Labels<-read.table("activity_labels.txt")
Activity_Labels<-rename(Activity_Labels, Activity_Id=V1,Activity_Desc=V2)
# Load MeasurementParameters from Features.txt and set descriptive column names
MeasurementParameters<-read.table("features.txt")
MeasurementParameters<-rename(MeasurementParameters, Variable_id=V1,MeasurementParameter=V2)
# Load Training Data
XTrain<-read.table("train/X_train.txt")
YTrain<-read.table("train/y_train.txt")
SubjectTrain<-read.table("train/subject_train.txt")
# Load Test Data
XTest<-read.table("test/X_test.txt")
YTest<-read.table("test/y_test.txt")
SubjectTest<-read.table("test/subject_test.txt")
# Assignment Question 1 - "Merge the training and the test sets to create one data set"
# Merge training and Test Sets
Observation_For_Each_MeasurementParameter_All<-rbind(XTrain,XTest)
Activity_Associated_With_Each_Observation_All<-rbind(YTrain,YTest)
Subjects_All<-rbind(SubjectTrain,SubjectTest)
rm(XTrain,YTrain,SubjectTrain,XTest,YTest,SubjectTest)
# Assignment Question 2 - "Extract only the measurements on the mean and standard deviation for each measurement"
# Keep only columns for mean and std
# Create in integer vector with index of the needed Parameters
mean_std_vars_index<-grep("-mean\\(\\)|-std\\(\\)",MeasurementParameters[,2])
# Remove the parameters not reqired.
Observation_For_Each_MeasurementParameter_All <- Observation_For_Each_MeasurementParameter_All[,mean_std_vars_index]
# Update the proper coluum names.
names(Observation_For_Each_MeasurementParameter_All) <- tolower(MeasurementParameters[mean_std_vars_index, 2])
# Assignment Question 3 -"Use descriptive activity names to name the activities in the data set"
# Set Descriptive Activity Names
Activity_Associated_With_Each_Observation_All<-rename(Activity_Associated_With_Each_Observation_All,Activity=V1)
Activity_Associated_With_Each_Observation_All[,"Activity"] <- Activity_Labels[Activity_Associated_With_Each_Observation_All[,"Activity"],"Activity_Desc"]
Subjects_All<-rename(Subjects_All, SubjectId=V1)
Subject_Activity_Observations_Dataset <- cbind(Subjects_All, Activity_Associated_With_Each_Observation_All, Observation_For_Each_MeasurementParameter_All)
#  Assignment Question 4 -"Appropriately label the data set with descriptive variable names"
Original_Measurement_Parameter_Names  <- colnames(Subject_Activity_Observations_Dataset);
Proper_Measurement_Parameter_Names <- Original_Measurement_Parameter_Names
# Cleaning up the variable names
for (i in 1:length(Proper_Measurement_Parameter_Names))
{
Proper_Measurement_Parameter_Names[i] = gsub("\\()","",Proper_Measurement_Parameter_Names[i])
Proper_Measurement_Parameter_Names[i] = gsub("-std$","StdDev",Proper_Measurement_Parameter_Names[i])
Proper_Measurement_Parameter_Names[i] = gsub("-mean","Mean",Proper_Measurement_Parameter_Names[i])
Proper_Measurement_Parameter_Names[i] = gsub("^(t)","time",Proper_Measurement_Parameter_Names[i])
Proper_Measurement_Parameter_Names[i] = gsub("^(f)","freq",Proper_Measurement_Parameter_Names[i])
Proper_Measurement_Parameter_Names[i] = gsub("([Gg]ravity)","Gravity",Proper_Measurement_Parameter_Names[i])
Proper_Measurement_Parameter_Names[i] = gsub("([Bb]ody[Bb]ody|[Bb]ody)","Body",Proper_Measurement_Parameter_Names[i])
Proper_Measurement_Parameter_Names[i] = gsub("[Gg]yro","Gyro",Proper_Measurement_Parameter_Names[i])
Proper_Measurement_Parameter_Names[i] = gsub("AccMag","AccMagnitude",Proper_Measurement_Parameter_Names[i])
Proper_Measurement_Parameter_Names[i] = gsub("([Bb]odyaccjerkmag)","BodyAccJerkMagnitude",Proper_Measurement_Parameter_Names[i])
Proper_Measurement_Parameter_Names[i] = gsub("JerkMag","JerkMagnitude",Proper_Measurement_Parameter_Names[i])
Proper_Measurement_Parameter_Names[i] = gsub("GyroMag","GyroMagnitude",Proper_Measurement_Parameter_Names[i])
};
colnames(Subject_Activity_Observations_Dataset) = Proper_Measurement_Parameter_Names;
#  Assignment Question 5 -"From the data set in step 4, creates a second, independent tidy data set with the average of
#                          each variable for each activity and each subject"
# Wide Dataset
#  Grouping asn Summary by Activity first, then Subject
Activity_Subject_Grouping_Dataset<-group_by(Subject_Activity_Observations_Dataset,Activity,SubjectId)
Activity_Subject_Grouping_Summary<-summarise_each(Activity_Subject_Grouping_Dataset,funs(mean))
write.table(Activity_Subject_Grouping_Summary, "Activity_Subject_Grouping_Summary.txt")
#  Grouping asn Summary by Subject first, then activity
Subject_Activity_Grouping_Dataset<-group_by(Subject_Activity_Observations_Dataset,Activity,SubjectId)
Subject_Activity_Grouping_Summary<-summarise_each(Subject_Activity_Grouping_Dataset,funs(mean))
write.table(Subject_Activity_Grouping_Summary, "Subject_Activity_Grouping_Summary.txt")
# Tidy Narrow Dataset
Tidy_Narrow<-gather(Subject_Activity_Observations_Dataset,MeasurementParameter,Observation,-SubjectId,-Activity)
Narrow_Grouping_Dataset<-group_by(Tidy_Narrow,SubjectId,Activity,MeasurementParameter)
Tidy_Narrow_Summary<-summarise(Narrow_Grouping_Dataset,mean(Observation))
write.table(Tidy_Narrow_Summary, "Tidy_Narrow_Summary.txt")
# End of Program
